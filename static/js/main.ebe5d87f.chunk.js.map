{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","children","title","upvotes","comments","showCommentsModal","selectedPostIndex","this","url","fetch","response","json","data","push","ups","setState","post","console","log","post_url","permalink","substring","length","commenturl","commentresponse","commentdata","subreddit_comments","i","j","body","getData","getCommentsData","key","className","author","icon","faArrowAltCircleUp","list","datetime","Date","created","toDateString","href","faExternalLinkAlt","onClick","showComments","faComments","num_comments","Fragment","getComments","getListItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ebe5d87f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { thisExpression } from '@babel/types';\nimport './my-sass.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComments, faArrowAltCircleUp, faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\n// import Comments from './components/comments';\n// import Moment from 'react-moment';\n// import 'moment-timezone';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = { \n      children: \"\",\n      title: \"\",\n      upvotes: \"\",\n      comments: \"\",\n      showCommentsModal: false,\n      selectedPostIndex: 0\n    }\n  }\n  \n  async getData() {\n    this.url = \"https://www.reddit.com/r/news/.json?=\";\n    this.response = await fetch(this.url);\n    this.data = await this.response.json();\n    this.title = [];\n    this.upvotes = [];\n    this.children = [];\n    for (let children of this.data.data.children)\n    {\n      this.children.push(children.data);\n      this.title.push(children.data.title);\n      this.upvotes.push(children.data.ups);\n    }\n    this.setState({ children: this.children, title: this.title, upvotes: this.upvotes });\n  }\n\n\n  async getCommentsData(post){\n    console.log(post);\n    var post_url = post.permalink;\n    post_url = post_url.substring(0, post_url.length - 1);\n    this.commenturl = \"https://www.reddit.com/\"+post_url+\".json\";\n    this.commentresponse = await fetch(this.commenturl);\n    this.commentdata = await this.commentresponse.json();\n    var subreddit_comments = [];\n    for(var i = 0; i<this.commentdata.length;i++){\n      for(var j = 0;j<this.commentdata[i].data.children.length;j++){\n        if(this.commentdata[i].data.children[j].data.body)\n          subreddit_comments.push(this.commentdata[i].data.children[j].data);\n      }\n    }\n    this.setState({comments: subreddit_comments});\n  }\n\n  async componentDidMount(){\n    this.getData();\n  }\n\n  getComments() {\n    var post = this.state.children[this.state.selectedPostIndex];\n    this.getCommentsData(post);\n    var comments = [];\n    for(var i =0;i<this.state.comments.length;i++){\n      comments.push(<li key={i} className=\"card\"> \n        <div className=\"commentBody\">\n          {this.state.comments[i].body}\n        </div> \n        <div className=\"flex-justify-between\">\n          <p className=\"author\"> posted by {this.state.comments[i].author}</p>\n          <p className=\"author\"><FontAwesomeIcon icon={faArrowAltCircleUp} /> {this.state.comments.ups} upvotes</p>\n        </div>\n      </li>);\n    }\n    return comments;\n  }\n\n  getListItem(){\n    var list = [];\n    var datetime = []\n    for(let i=0; i<this.state.children.length; i++){\n      datetime.push((new Date(this.children[i].created * 1000).toDateString()))\n      list.push(<li key={i} className=\"card\">\n      <p className=\"author\">{datetime[i]}</p>\n      <div className=\"updates\">\n        <a className=\"newsTitle\">{this.children[i].title}</a>\n      </div>\n\n      <p className=\"author\">posted by {this.children[i].author}</p>\n        <div className=\"article flex\">\n          <p className=\"actualArticle\"><a href={this.children[i].url}>Read Full Article <FontAwesomeIcon icon={faExternalLinkAlt} /></a>  </p>\n          <div className=\"flex\">\n            {/* <Router> */}\n              <p> \n              <a onClick={()=>{\n                this.showComments(i);\n                // this.setState({ showCommentsModal:  })\n              }} >\n              <FontAwesomeIcon icon={faComments} /> {this.children[i].num_comments}\n              </a>  comments</p>\n              {/* <p className=\"comments\">\n                <Link to=\"/comments\"><FontAwesomeIcon icon={faComments} /> {this.children[i].num_comments} comments</Link>\n              </p> */}\n            {/* <Switch>\n              <Route path=\"/comments\">\n                <Comments />\n              </Route>\n            </Switch>\n            </Router> */}\n            <p className=\"upvotes\"><FontAwesomeIcon icon={faArrowAltCircleUp} /> {this.children[i].ups} upvotes</p>\n          </div>\n        </div>\n      </li>\n      )\n    }\n    // console.log(datetime);\n    return list;\n  }\n\n  showComments(i) {\n    console.log(i);\n    console.log(this.state.children);\n    var post = this.state.children[i];\n    // this.getComments(post);\n    this.setState({ showCommentsModal: true, selectedPostIndex : i });\n  }\n\n\n  render()\n  {\n    return (\n      <React.Fragment>\n        <h1 className=\"text-center page-title\">Reddit News Client</h1>\n        <ul>{ \n          this.state.title.length === 0 ?\n            \"loading news articles from subreddit r/news ...\" : \n            this.state.showCommentsModal ? this.getComments() : this.getListItem()\n          }\n        </ul>\n      </React.Fragment>\n    )\n  }\n}\n\nfunction Comments() {\n  return <h1>This is the comments Section</h1>\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}